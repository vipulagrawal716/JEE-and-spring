package com.example.demo.controller;

import java.util.ArrayList;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;

import com.example.demo.dao.AlienRepo;
import com.example.demo.model.Alien;

import antlr.collections.List;

@RestController
public class AlienController {
	@Autowired
	AlienRepo repo;
	@RequestMapping("/")
	public String home()
	{
		return "home.jsp";
	}
	
	/*
	 * @RequestMapping("addAlien") public String addAlien(Alien alien) {
	 * repo.save(alien); return "home.jsp"; }
	 */

		/*
		 * @RequestMapping("getAlien") public ModelAndView getAlien(@RequestParam
		 * Integer aid) { ModelAndView mv = new ModelAndView("showalien.jsp"); Alien
		 * alien = repo.findById(aid).orElse(new Alien());
		 * System.out.println(repo.findByTech("java"));
		 * System.out.println(repo.findByAidGreaterThan(3));
		 * System.out.println(repo.findByTechSorted("java")); mv.addObject(alien);
		 * return mv; }
		 */
		@GetMapping(path = "aliens"/* ,produces = {"application/xml"} */)
		//by default @RequestMapping is @GetMapping
	//@ResponseBody
	public java.util.List<Alien> getAliens()
	{
		return repo.findAll();
	}
	@RequestMapping("alien/{aid}")
	//@ResponseBody
	public Optional<Alien> getAlien(@PathVariable("aid") int aid)
	{
		return repo.findById(aid);	}
	@PostMapping("alien")
	
	public Alien addAlien(@RequestBody Alien alien)
	//@requestbody is use for sending raw data from client
	{
		repo.save(alien);
		return alien;
	}
	@DeleteMapping("alien/{aid}")
	public String deleteAlien(@PathVariable("aid") int aid)
	{
		Alien a =repo.getOne(aid);
		repo.delete(a);
		return "deleted";
	}
	

}
